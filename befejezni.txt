schrol bar a cheat ben mindíg 0 legyen
target legyen frissítve
Hozzá adni a niktót
Megnézni a logolással mi van
automazált tesztelő át csinálása (Dizájn+nikto hozzáadás+log file hoz adni a auto testinget)


- Részletesebben szét írni mint manual. Mi mit csiná. 
Kis pop up hint hogy melyik támadás mit csinál
Néhány sikeres támadás

class CreateToolTip:
    """
    Tooltip létrehozása egy widgethez.
    """
    def __init__(self, widget, text="widget info"):
        self.waittime = 500     # késleltetés (ms)
        self.wraplength = 180   # alapértelmezett tördelési hossz (pixel)
        self.widget = widget
        self.text = text
        self.widget.bind("<Enter>", self.enter)
        self.widget.bind("<Leave>", self.leave)
        self.widget.bind("<ButtonPress>", self.leave)
        self.id = None
        self.tw = None

    def enter(self, event=None):
        self.schedule()

    def leave(self, event=None):
        self.unschedule()
        self.hidetip()

    def schedule(self):
        self.unschedule()
        self.id = self.widget.after(self.waittime, self.showtip)

    def unschedule(self):
        id_ = self.id
        self.id = None
        if id_:
            self.widget.after_cancel(id_)

    def showtip(self, event=None):
        # Pozíció meghatározása
        x, y, cx, cy = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 30

        # Tooltip ablak létrehozása
        self.tw = tk.Toplevel(self.widget)
        self.tw.wm_overrideredirect(True)
        self.tw.wm_geometry(f"+{x}+{y}")

        # Dinamikusan számoljuk ki a szöveg szélességét
        font = tkfont.Font(font=self.widget.cget("font"))
        text_width = font.measure(self.text)
        max_width = 300  # Maximum szélesség pixelben
        if text_width > max_width:
            wraplength = max_width
        else:
            wraplength = text_width + 10  # Egy kis plusz hely a szebb megjelenésért

        label = tk.Label(self.tw, text=self.text, justify='left',
                         background="#ffffe0", relief='solid', borderwidth=1,
                         wraplength=wraplength)
        label.pack(ipadx=1)

    def hidetip(self):
        if self.tw:
            self.tw.destroy()
        self.tw = None
